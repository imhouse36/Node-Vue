---
description: 
globs: *.js,*/*.js,*/*/*.js,Node/*
alwaysApply: false
---
# Node.js 高效开发指南

## 🎯 推荐技术栈
- **运行环境**: Node.js + Express 5.1.0
- **数据库**: MongoDB + Mongoose 8.15.1
- **身份认证**: JWT + bcryptjs 3.0.2
- **安全中间件**: helmet、cors
- **开发工具**: nodemon、TypeScript、Jest
- **环境配置**: dotenv

## 📁 详细项目结构 (与实际项目完全匹配)
```
Node/
├── src/                      # 源代码
│   ├── api/                  # (或 routes) API路由定义
│   │   ├── index.ts          # 组合所有路由
│   │   ├── auth.routes.ts    # 认证相关路由
│   │   └── user.routes.ts    # 用户相关路由
│   ├── config/               # 环境与配置
│   │   ├── database.ts       # 数据库连接 (Mongoose)
│   │   └── index.ts          # 导出所有配置 (dotenv)
│   ├── controllers/          # 控制器 (处理请求、调用服务、返回响应)
│   │   ├── auth.controller.ts    # 认证控制器
│   │   └── user.controller.ts    # 用户控制器
│   ├── middlewares/          # 中间件
│   │   ├── auth.middleware.ts        # JWT验证
│   │   └── errorHandler.middleware.ts # 统一错误处理
│   ├── models/               # Mongoose数据模型
│   │   └── User.model.ts     # 用户模型
│   ├── services/             # 业务逻辑层 (可选但推荐，解耦控制器和模型)
│   │   ├── auth.service.ts   # 认证服务
│   │   └── user.service.ts   # 用户服务
│   ├── types/                # TypeScript类型定义
│   │   ├── express/index.d.ts    # Express Request/Response 扩展
│   │   └── jwt.d.ts          # JWT Payload 类型
│   ├── utils/                # 工具函数
│   │   ├── logger.ts         # 日志工具
│   │   └── ApiResponse.ts    # 统一API响应格式
│   └── server.ts             # (或 app.ts) Express应用入口
├── tests/                    # Jest 测试文件
│   ├── user.test.ts
│   └── __mocks__/
├── .env.development          # 开发环境配置
├── .env.production           # 生产环境配置
├── jest.config.js            # Jest测试配置
├── tsconfig.json             # TypeScript配置
└── package.json
```

## 🔧 核心开发原则

### 1. 环境配置 (与项目保持一致)
```javascript
// config/index.js
const config = {
  env: process.env.NODE_ENV || 'development',
  port: process.env.PORT || 3000,
  
  database: {
    url: process.env.DATABASE_URL || 'mongodb://localhost:27017/nodeapp_dev'
  },
  
  jwt: {
    secret: process.env.JWT_SECRET || 'dev-secret-key',
    expiresIn: process.env.JWT_EXPIRES_IN || '24h'
  },
  
  cors: {
    origin: process.env.FRONTEND_URL || 'http://localhost:5173'
  }
}

module.exports = config
```

```bash
# .env.development (与项目一致)
NODE_ENV=development
PORT=3000
FRONTEND_URL=http://localhost:5173
JWT_SECRET=dev-secret-key
DATABASE_URL=mongodb://localhost:27017/nodeapp_dev

# .env.production (与项目一致)
NODE_ENV=production
PORT=8080
FRONTEND_URL=你的前端生产地址
JWT_SECRET=生产环境的安全密钥
DATABASE_URL=mongodb://your-server/nodeapp_prod
```

### 2. 控制器模式 (简洁版)
```javascript
// controllers/userController.js

/**
 * 用户控制器
 */
const userController = {
  // 获取用户信息
  async getUser(req, res) {
    try {
      const { id } = req.params
      const user = await User.findById(id)
      
      if (!user) {
        return res.status(404).json({ 
          success: false, 
          message: '用户不存在' 
        })
      }
      
      res.json({ 
        success: true, 
        data: user 
      })
    } catch (error) {
      res.status(500).json({ 
        success: false, 
        message: error.message 
      })
    }
  },

  // 创建用户
  async createUser(req, res) {
    try {
      const user = new User(req.body)
      await user.save()
      
      res.status(201).json({ 
        success: true, 
        data: user 
      })
    } catch (error) {
      res.status(400).json({ 
        success: false, 
        message: error.message 
      })
    }
  }
}

module.exports = userController
```

### 3. 认证中间件
```javascript
// middleware/auth.js
const jwt = require('jsonwebtoken')
const config = require('../config')

const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '')
  
  if (!token) {
    return res.status(401).json({ 
      success: false, 
      message: '访问令牌缺失' 
    })
  }
  
  try {
    const decoded = jwt.verify(token, config.jwt.secret)
    req.user = decoded
    next()
  } catch (error) {
    res.status(401).json({ 
      success: false, 
      message: '令牌无效' 
    })
  }
}

module.exports = authMiddleware
```

### 4. MongoDB + Mongoose 数据模型设计
```javascript
// models/User.js
const mongoose = require('mongoose')
const bcryptjs = require('bcryptjs')

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: [true, 'Username is required'],
    unique: true,
    trim: true,
    minlength: [3, 'Username must be at least 3 characters long'],
    maxlength: [30, 'Username cannot exceed 30 characters']
  },
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [6, 'Password must be at least 6 characters long']
  },
  role: {
    type: String,
    enum: ['user', 'admin', 'moderator'],
    default: 'user'
  },
  isActive: {
    type: Boolean,
    default: true
  }
}, {
  timestamps: true,
  toJSON: {
    transform: function(doc, ret) {
      delete ret.password // 在JSON输出中隐藏密码
      return ret
    }
  }
})

// 密码加密 (使用 bcryptjs)
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next()
  this.password = await bcryptjs.hash(this.password, 10)
  next()
})

// 密码验证 (使用 bcryptjs)
userSchema.methods.comparePassword = function(password) {
  return bcryptjs.compare(password, this.password)
}

module.exports = mongoose.model('User', userSchema)
```

### 5. 数据库连接配置
```javascript
// config/database.js
const mongoose = require('mongoose')
const config = require('./index')

/**
 * 连接到MongoDB数据库
 */
const connectDatabase = async () => {
  try {
    console.log('🔄 Connecting to MongoDB...')
    
    await mongoose.connect(config.database.url, {
      bufferCommands: false
    })
    
    console.log('✅ MongoDB connected successfully')
    console.log(`📍 Database: ${config.database.url.split('/').pop()}`)
    
    return mongoose.connection
  } catch (error) {
    console.error('❌ MongoDB connection error:', error.message)
    throw error
  }
}

module.exports = { connectDatabase, mongoose }
```

## 🛡️ 基础安全设置 (完整版)
```javascript
// app.js
const express = require('express')
const cors = require('cors')
const helmet = require('helmet')
const { connectDatabase } = require('./config/database')
const config = require('./config')

const app = express()

// 基础安全头部
app.use(helmet())

// CORS 配置
app.use(cors({
  origin: config.cors.origin,
  credentials: true
}))

// 请求解析
app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))

// 启动服务器
const startServer = async () => {
  try {
    // 连接数据库
    await connectDatabase()
    console.log('✅ Database connected successfully')
    
    // 启动服务器
    app.listen(config.port, () => {
      console.log(`🚀 Server is running on port ${config.port}`)
      console.log(`📍 Environment: ${config.env}`)
      console.log(`🌐 Access URL: http://localhost:${config.port}`)
    })
  } catch (error) {
    console.error('❌ Failed to start server:', error.message)
    process.exit(1)
  }
}

// 统一错误处理
app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).json({
    success: false,
    message: '服务器内部错误'
  })
})

startServer()
```

## 🚀 性能要点
- 使用 MongoDB 连接池管理数据库连接
- 频繁查询的数据考虑缓存
- 大文件上传使用流处理
- 生产环境使用 PM2 或类似工具
- Mongoose 查询优化和索引设计

## ✅ 开发检查清单 (3项核心)
开发完成后检查：
- [ ] **错误处理**: 是否添加了 try-catch 和适当的错误响应
- [ ] **数据验证**: 是否验证了请求参数和数据格式，使用了 Mongoose 验证
- [ ] **安全考虑**: 敏感操作是否需要认证，密码是否用 bcryptjs 加密

## 📚 常用代码片段

### API 响应格式
```javascript
// utils/response.js
const sendSuccess = (res, data, message = '成功') => {
  res.json({
    success: true,
    data,
    message
  })
}

const sendError = (res, message = '错误', statusCode = 400) => {
  res.status(statusCode).json({
    success: false,
    message
  })
}

module.exports = { sendSuccess, sendError }
```

### Mongoose 参数验证
```javascript
// middleware/validate.js
const { body, validationResult } = require('express-validator')

const validateUser = [
  body('username')
    .isLength({ min: 3, max: 30 })
    .withMessage('用户名长度必须在3-30字符之间'),
  body('email')
    .isEmail()
    .withMessage('请输入有效的邮箱地址'),
  body('password')
    .isLength({ min: 6 })
    .withMessage('密码至少需要6个字符'),
  
  (req, res, next) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '数据验证失败',
        errors: errors.array()
      })
    }
    next()
  }
]

module.exports = { validateUser }
```

### 路由定义
```javascript
// routes/users.js
const express = require('express')
const userController = require('../controllers/userController')
const authMiddleware = require('../middleware/auth')
const { validateUser } = require('../middleware/validate')

const router = express.Router()

router.get('/:id', userController.getUser)
router.post('/', validateUser, userController.createUser)
router.put('/:id', authMiddleware, userController.updateUser)

module.exports = router
```

## 📊 日志建议
```javascript
// utils/logger.js
const log = (level, message, data = null) => {
  const timestamp = new Date().toISOString()
  console.log(`[${timestamp}] ${level.toUpperCase()}: ${message}`, data || '')
}

module.exports = { log }
```

## 🗄️ MongoDB 最佳实践
- 合理设计 Schema 和索引
- 使用 Mongoose 的内置验证功能
- 避免深层嵌套文档
- 合理使用 populate 进行关联查询
- 生产环境开启 MongoDB 复制集

---
**记住**: 专注使用 MongoDB + Mongoose，确保数据库的一致性和可靠性。简单直接的代码比过度设计的代码更容易维护。 