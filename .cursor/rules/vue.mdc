---
description: 
globs: *.vue,*/*/*.vue,Vue/*
alwaysApply: false
---
# Vue.js 开发规则 - AI代码生成标准

> **AI指令**: 生成Vue.js代码时严格遵循此文档的所有规则和模板

## 🔴 强制组件结构 (AI必须复制)

### Vue组件标准模板
```vue
<script setup>
import { ref, onMounted } from 'vue'
import { ElMessage } from 'element-plus'

// 状态定义
const loading = ref(false)
const data = ref(null)

// API请求函数
const fetchData = async () => {
  loading.value = true
  try {
    const response = await fetch('/api/endpoint')
    const result = await response.json()
    
    // 对接后端响应格式: {success, data, message}
    if (result.success) {
      data.value = result.data
      ElMessage.success(result.message)
    } else {
      ElMessage.error(result.message)
    }
  } catch (error) {
    ElMessage.error('网络连接失败')
  } finally {
    loading.value = false
  }
}

onMounted(fetchData)
</script>

<template>
  <div v-loading="loading" class="p-4">
    <!-- 页面内容 -->
  </div>
</template>
```

## 🔴 强制开发约束

### 必须遵循的规则
```
✓ 使用script setup语法
✓ 使用Element Plus组件 (禁止原生HTML)
✓ 使用ref/reactive管理状态
✓ 添加v-loading指令
✓ 使用ElMessage消息提示
✓ 检查{success,data,message}响应格式
✓ 使用TailwindCSS布局类名
```

### 后端对接标准
```
处理后端响应:
- 检查 result.success 
- 成功: 使用 result.data
- 失败: 显示 result.message
- 异常: 显示 "网络连接失败"
```

## 📦 常用组件 (快速参考)

### 基础组件
```vue
<!-- 按钮 -->
<el-button type="primary" :loading="loading" @click="handleClick">
  提交
</el-button>

<!-- 输入框 -->
<el-input v-model="form.name" placeholder="请输入" />

<!-- 表格 -->
<el-table :data="tableData" v-loading="loading">
  <el-table-column prop="name" label="名称" />
  <el-table-column label="操作">
    <template #default="{ row }">
      <el-button size="small" @click="edit(row)">编辑</el-button>
    </template>
  </el-table-column>
</el-table>

<!-- 表单 -->
<el-form :model="form" ref="formRef">
  <el-form-item label="用户名" prop="username">
    <el-input v-model="form.username" />
  </el-form-item>
</el-form>

<!-- 弹窗 -->
<el-dialog v-model="dialogVisible" title="标题">
  <p>内容</p>
  <template #footer>
    <el-button @click="dialogVisible = false">取消</el-button>
    <el-button type="primary" @click="confirm">确定</el-button>
  </template>
</el-dialog>
```

## 🔴 常用页面模板

### 列表页面
```vue
<script setup>
import { ref, onMounted } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'

const loading = ref(false)
const list = ref([])

const fetchList = async () => {
  loading.value = true
  try {
    const response = await fetch('/api/data')
    const result = await response.json()
    if (result.success) {
      list.value = result.data
    } else {
      ElMessage.error(result.message)
    }
  } catch (error) {
    ElMessage.error('网络连接失败')
  } finally {
    loading.value = false
  }
}

const deleteItem = async (id) => {
  try {
    await ElMessageBox.confirm('确定删除吗？')
    const response = await fetch(`/api/data/${id}`, { method: 'DELETE' })
    const result = await response.json()
    if (result.success) {
      ElMessage.success(result.message)
      fetchList()
    } else {
      ElMessage.error(result.message)
    }
  } catch (error) {}
}

onMounted(fetchList)
</script>

<template>
  <div class="p-6">
    <div class="mb-4 flex justify-between">
      <h1 class="text-2xl font-bold">数据列表</h1>
      <el-button type="primary">新增</el-button>
    </div>
    
    <el-table :data="list" v-loading="loading">
      <el-table-column prop="name" label="名称" />
      <el-table-column label="操作">
        <template #default="{ row }">
          <el-button size="small">编辑</el-button>
          <el-button size="small" type="danger" @click="deleteItem(row.id)">
            删除
          </el-button>
        </template>
      </el-table-column>
    </el-table>
  </div>
</template>
```

### 表单页面
```vue
<script setup>
import { ref } from 'vue'
import { ElMessage } from 'element-plus'

const loading = ref(false)
const form = ref({
  name: '',
  email: ''
})

const submitForm = async () => {
  loading.value = true
  try {
    const response = await fetch('/api/data', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(form.value)
    })
    
    const result = await response.json()
    if (result.success) {
      ElMessage.success(result.message)
      form.value = { name: '', email: '' }
    } else {
      ElMessage.error(result.message)
    }
  } catch (error) {
    ElMessage.error('网络连接失败')
  } finally {
    loading.value = false
  }
}
</script>

<template>
  <div class="p-6">
    <h1 class="text-2xl font-bold mb-4">添加数据</h1>
    
    <el-form :model="form" class="max-w-md">
      <el-form-item label="姓名">
        <el-input v-model="form.name" />
      </el-form-item>
      <el-form-item label="邮箱">
        <el-input v-model="form.email" />
      </el-form-item>
      <el-form-item>
        <el-button type="primary" :loading="loading" @click="submitForm">
          提交
        </el-button>
      </el-form-item>
    </el-form>
  </div>
</template>
```

## 🔴 验证清单 (AI自检)

```
必须包含:
✓ script setup 语法
✓ loading 状态管理
✓ result.success 判断
✓ ElMessage 消息提示
✓ v-loading 指令
✓ Element Plus 组件
✓ TailwindCSS 类名

禁止使用:
✗ 原生HTML标签 (button, input, table等)
✗ alert() 弹窗
✗ 同步请求
✗ 手写CSS样式
``` 